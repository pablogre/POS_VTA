#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de configuraci√≥n inicial para el sistema POS con AFIP
Ejecutar: python setup_afip.py
"""

import os
import json
from datetime import datetime

def crear_directorios():
    """Crear directorios necesarios"""
    directorios = [
        'certificados',
        'cache',
        'logs',
        'backups'
    ]
    
    print("üìÅ Creando directorios...")
    for directorio in directorios:
        os.makedirs(directorio, exist_ok=True)
        print(f"   ‚úÖ {directorio}/")

def crear_config_local():
    """Crear archivo de configuraci√≥n local"""
    print("\n‚öôÔ∏è Configurando par√°metros AFIP...")
    
    # Solicitar datos al usuario
    print("\nüìù Ingresa los datos de tu empresa:")
    
    cuit = input("CUIT (sin guiones, ej: 20123456789): ").strip()
    while len(cuit) != 11 or not cuit.isdigit():
        print("‚ùå CUIT inv√°lido. Debe tener 11 d√≠gitos.")
        cuit = input("CUIT (sin guiones, ej: 20123456789): ").strip()
    
    punto_venta = input("Punto de Venta (ej: 1): ").strip()
    while not punto_venta.isdigit() or int(punto_venta) < 1:
        print("‚ùå Punto de venta inv√°lido.")
        punto_venta = input("Punto de Venta (ej: 1): ").strip()
    punto_venta = int(punto_venta)
    
    ambiente = input("¬øUsar ambiente de homologaci√≥n? (S/n): ").strip().lower()
    use_homologacion = ambiente in ['', 's', 'si', 's√≠', 'y', 'yes']
    
    # Crear archivo config_local.py
    config_content = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Configuraci√≥n local del sistema POS AFIP
Archivo generado autom√°ticamente el {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""

class Config:
    """Configuraci√≥n de Flask"""
    SECRET_KEY = 'tu_clave_secreta_{datetime.now().strftime("%Y%m%d")}'
    SQLALCHEMY_DATABASE_URI = 'mysql+pymysql://pos_user:pos_password@localhost/pos_argentina'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    
    # Configuraci√≥n adicional
    DEBUG = True
    TESTING = False

class ARCAConfig:
    """Configuraci√≥n de AFIP/ARCA"""
    
    # Datos de la empresa
    CUIT = '{cuit}'
    PUNTO_VENTA = {punto_venta}
    
    # Certificados digitales
    CERT_PATH = 'certificados/certificado.crt'
    KEY_PATH = 'certificados/private.key'
    
    # Ambiente (True = Homologaci√≥n, False = Producci√≥n)
    USE_HOMOLOGACION = {use_homologacion}
    
    # URLs de servicios AFIP
    @property
    def WSAA_URL(self):
        if self.USE_HOMOLOGACION:
            return 'https://wsaahomo.afip.gov.ar/ws/services/LoginCms?wsdl'
        else:
            return 'https://wsaa.afip.gov.ar/ws/services/LoginCms?wsdl'
    
    @property
    def WSFEv1_URL(self):
        if self.USE_HOMOLOGACION:
            return 'https://wswhomo.afip.gov.ar/wsfev1/service.asmx?WSDL'
        else:
            return 'https://servicios1.afip.gov.ar/wsfev1/service.asmx?WSDL'
    
    # Cache de tokens
    TOKEN_CACHE_FILE = 'cache/token_afip.json'
    
    # Logging
    LOG_FILE = 'logs/afip.log'
    LOG_LEVEL = 'DEBUG' if USE_HOMOLOGACION else 'INFO'
'''
    
    with open('config_local.py', 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print(f"‚úÖ Archivo config_local.py creado")
    print(f"   CUIT: {cuit}")
    print(f"   Punto de Venta: {punto_venta}")
    print(f"   Ambiente: {'HOMOLOGACI√ìN' if use_homologacion else 'PRODUCCI√ìN'}")

def crear_readme_certificados():
    """Crear README con instrucciones para certificados"""
    readme_content = """# CERTIFICADOS AFIP

## ¬øQu√© necesitas?

Para facturar electr√≥nicamente necesitas un certificado digital de AFIP.

## ¬øC√≥mo obtener el certificado?

### Paso 1: Ingresar a AFIP
1. Ve a https://www.afip.gob.ar
2. Ingresa con tu CUIT y Clave Fiscal

### Paso 2: Administrador de Relaciones
1. Busca "Administrador de Relaciones de Clave Fiscal"
2. Click en "Ingresar"

### Paso 3: Generar Certificado
1. Ve a "Certificados"
2. Click en "Generar nuevo certificado"
3. Selecciona "Facturaci√≥n Electr√≥nica"
4. Sigue las instrucciones para generar el certificado

### Paso 4: Descargar archivos
Debes descargar 2 archivos:
- `certificado.crt` (certificado p√∫blico)
- `private.key` (clave privada)

### Paso 5: Colocar en carpeta
Coloca ambos archivos en esta carpeta (`certificados/`):
```
certificados/
‚îú‚îÄ‚îÄ certificado.crt
‚îî‚îÄ‚îÄ private.key
```

## ¬øProblemas?

- Verifica que los archivos tengan exactamente esos nombres
- Aseg√∫rate de que el certificado no haya expirado
- En homologaci√≥n, puedes usar certificados de prueba

## Verificar certificados

Ejecuta el diagn√≥stico:
```bash
python diagnostico_afip.py
```
"""
    
    with open('certificados/README.md', 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print("‚úÖ Instrucciones creadas en certificados/README.md")

def crear_script_inicio():
    """Crear script de inicio mejorado"""
    script_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de inicio del sistema POS con diagn√≥stico
"""

import os
import sys

def verificar_requisitos():
    """Verificar que todo est√© configurado"""
    print("üîç Verificando configuraci√≥n...")
    
    errores = []
    
    # Verificar config_local.py
    if not os.path.exists('config_local.py'):
        errores.append("‚ùå Falta config_local.py (ejecuta: python setup_afip.py)")
    
    # Verificar certificados
    if not os.path.exists('certificados/certificado.crt'):
        errores.append("‚ùå Falta certificado.crt")
    
    if not os.path.exists('certificados/private.key'):
        errores.append("‚ùå Falta private.key")
    
    # Verificar directorios
    dirs_necesarios = ['cache', 'logs', 'certificados']
    for directorio in dirs_necesarios:
        if not os.path.exists(directorio):
            errores.append(f"‚ùå Falta directorio {directorio}/")
    
    if errores:
        print("\\nüö® ERRORES ENCONTRADOS:")
        for error in errores:
            print(f"   {error}")
        print("\\nüí° SOLUCI√ìN:")
        print("   1. Ejecuta: python setup_afip.py")
        print("   2. Lee: certificados/README.md")
        print("   3. Ejecuta: python diagnostico_afip.py")
        return False
    
    print("‚úÖ Configuraci√≥n OK")
    return True

def iniciar_aplicacion():
    """Iniciar la aplicaci√≥n Flask"""
    try:
        # Importar la aplicaci√≥n
        from app import app, create_tables
        
        print("üöÄ Iniciando POS Argentina...")
        print("üìç URL: http://localhost:5000")
        print("üë§ Usuario: admin")
        print("üîë Contrase√±a: admin123")
        print()
        
        # Crear tablas
        with app.app_context():
            create_tables()
        
        # Iniciar servidor
        app.run(debug=True, host='0.0.0.0', port=5000)
        
    except Exception as e:
        print(f"‚ùå Error iniciando aplicaci√≥n: {e}")
        print("\\nüí° SOLUCI√ìN:")
        print("   Verifica que tengas instaladas las dependencias:")
        print("   pip install flask flask-sqlalchemy pymysql zeep cryptography")

if __name__ == "__main__":
    if verificar_requisitos():
        iniciar_aplicacion()
    else:
        sys.exit(1)
'''
    
    with open('iniciar.py', 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print("‚úÖ Script de inicio creado: iniciar.py")

def crear_requirements():
    """Crear archivo requirements.txt"""
    requirements = """# Dependencias del sistema POS AFIP
Flask==2.3.3
Flask-SQLAlchemy==3.0.5
PyMySQL==1.1.0
zeep==4.2.1
cryptography==41.0.4
requests==2.31.0
python-dateutil==2.8.2
lxml==4.9.3
urllib3==2.0.4
"""
    
    with open('requirements.txt', 'w') as f:
        f.write(requirements)
    
    print("‚úÖ Archivo requirements.txt creado")

def mostrar_resumen():
    """Mostrar resumen de configuraci√≥n"""
    print("\n" + "="*50)
    print("üéâ CONFIGURACI√ìN COMPLETADA")
    print("="*50)
    
    print("\nüìÅ ARCHIVOS CREADOS:")
    archivos = [
        "config_local.py - Configuraci√≥n del sistema",
        "requirements.txt - Dependencias Python", 
        "iniciar.py - Script de inicio",
        "certificados/README.md - Instrucciones"
    ]
    
    for archivo in archivos:
        print(f"   ‚úÖ {archivo}")
    
    print("\nüìã PR√ìXIMOS PASOS:")
    
    print("\n1Ô∏è‚É£ INSTALAR DEPENDENCIAS:")
    print("   pip install -r requirements.txt")
    
    print("\n2Ô∏è‚É£ OBTENER CERTIFICADOS AFIP:")
    print("   - Lee: certificados/README.md")
    print("   - Descarga certificado.crt y private.key de AFIP")
    print("   - Col√≥calos en certificados/")
    
    print("\n3Ô∏è‚É£ PROBAR CONEXI√ìN:")
    print("   python diagnostico_afip.py")
    
    print("\n4Ô∏è‚É£ INICIAR SISTEMA:")
    print("   python iniciar.py")
    
    print("\nüåê ACCESO:")
    print("   URL: http://localhost:5000")
    print("   Usuario: admin")
    print("   Contrase√±a: admin123")

def main():
    """Funci√≥n principal"""
    print("üîß CONFIGURACI√ìN INICIAL - POS AFIP")
    print("="*40)
    
    print("\nEste script configurar√° tu sistema para facturar con AFIP.")
    continuar = input("¬øContinuar? (S/n): ").strip().lower()
    
    if continuar not in ['', 's', 'si', 's√≠', 'y', 'yes']:
        print("Configuraci√≥n cancelada.")
        return
    
    try:
        crear_directorios()
        crear_config_local()
        crear_readme_certificados()
        crear_script_inicio()
        crear_requirements()
        mostrar_resumen()
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Configuraci√≥n interrumpida.")
    except Exception as e:
        print(f"\n‚ùå Error durante la configuraci√≥n: {e}")

if __name__ == "__main__":
    main()