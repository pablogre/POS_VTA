#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test espec√≠fico para ambiente de PRODUCCI√ìN AFIP
üö® ESTE TEST USA SERVICIOS REALES DE AFIP
Ejecutar: python test_produccion.py

IMPORTANTE: 
- Este script conecta con los servidores REALES de AFIP
- Verifica que tu configuraci√≥n de producci√≥n est√© correcta
- NO genera facturas, solo valida la conexi√≥n
"""

import os
import sys
import subprocess
from datetime import datetime, timedelta

def imprimir_header():
    """Imprimir header informativo"""
    print("üè≠ TEST AMBIENTE PRODUCCI√ìN AFIP")
    print("=" * 50)
    print("üö® ATENCI√ìN: Este test conecta con AFIP REAL")
    print("üîê Usa certificados reales de producci√≥n")
    print("üìã Valida configuraci√≥n antes de facturar")
    print("=" * 50)

def verificar_configuracion_produccion():
    """Verificar configuraci√≥n de producci√≥n"""
    print("\nüè≠ TEST 1: Configuraci√≥n de Producci√≥n")
    
    try:
        from config_local import ARCAConfig
        config = ARCAConfig()
        
        print(f"‚úÖ Configuraci√≥n cargada")
        print(f"   CUIT: {config.CUIT}")
        print(f"   Punto Venta: {config.PUNTO_VENTA}")
        print(f"   Ambiente: {'üß™ HOMOLOGACI√ìN' if config.USE_HOMOLOGACION else 'üè≠ PRODUCCI√ìN'}")
        print(f"   WSAA URL: {config.WSAA_URL}")
        print(f"   WSFEv1 URL: {config.WSFEv1_URL}")
        
        errores = []
        
        if config.USE_HOMOLOGACION:
            errores.append("A√∫n est√°s en modo HOMOLOGACI√ìN")
            print("‚ö†Ô∏è  Para producci√≥n real, cambia: USE_HOMOLOGACION = False")
        
        if config.CUIT == '20123456789' or config.CUIT == '20267565393':
            errores.append("CUIT de ejemplo - debes usar tu CUIT real")
            print("üö® ERROR: Usando CUIT de ejemplo")
        
        if len(config.CUIT) != 11 or not config.CUIT.isdigit():
            errores.append("CUIT inv√°lido - debe tener 11 d√≠gitos")
            print("üö® ERROR: CUIT con formato inv√°lido")
        
        if config.PUNTO_VENTA < 1 or config.PUNTO_VENTA > 9999:
            errores.append("Punto de venta inv√°lido")
            print("üö® ERROR: Punto de venta debe ser entre 1 y 9999")
        
        if errores:
            print("\n‚ùå Errores en configuraci√≥n:")
            for error in errores:
                print(f"   - {error}")
            return False
        
        print("‚úÖ Configuraci√≥n de producci√≥n correcta")
        return True
        
    except ImportError:
        print("‚ùå ERROR: No se encontr√≥ config_local.py")
        print("üí° Crea config_local.py con tu configuraci√≥n de producci√≥n")
        return False
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False

def verificar_certificados_reales():
    """Verificar certificados reales de AFIP"""
    print("\nüîê TEST 2: Certificados Reales de AFIP")
    
    archivos = {
        'certificados/certificado.crt': 'Certificado',
        'certificados/private.key': 'Clave Privada'
    }
    
    for archivo, nombre in archivos.items():
        print(f"\n   Verificando {nombre}...")
        
        if not os.path.exists(archivo):
            print(f"‚ùå Falta: {archivo}")
            print(f"üí° Coloca tu {nombre.lower()} real de AFIP en esa ubicaci√≥n")
            return False
        
        # Verificar tama√±o
        size = os.path.getsize(archivo)
        if size < 500:  # Certificados reales suelen ser > 1KB
            print(f"‚ö†Ô∏è  {archivo} muy peque√±o ({size} bytes)")
            print(f"   ¬øEs un certificado real de AFIP?")
        else:
            print(f"‚úÖ {archivo} ({size} bytes)")
        
        # Verificar contenido
        try:
            with open(archivo, 'r', encoding='utf-8') as f:
                contenido = f.read()
        except UnicodeDecodeError:
            # Intentar con latin-1
            with open(archivo, 'r', encoding='latin-1') as f:
                contenido = f.read()
        
        if archivo.endswith('.crt'):
            if 'BEGIN CERTIFICATE' not in contenido:
                print(f"‚ùå {archivo} - formato inv√°lido (no es un certificado PEM)")
                return False
            
            # Verificar que no sea certificado de prueba
            contenido_lower = contenido.lower()
            palabras_test = ['dummy', 'test', 'ejemplo', 'sample', 'demo']
            if any(palabra in contenido_lower for palabra in palabras_test):
                print(f"‚ö†Ô∏è  {archivo} parece ser un certificado de prueba")
                print("   Para producci√≥n necesitas un certificado real de AFIP")
            
            print(f"‚úÖ Certificado con formato correcto")
                
        elif archivo.endswith('.key'):
            formatos_validos = ['BEGIN PRIVATE KEY', 'BEGIN RSA PRIVATE KEY', 'BEGIN ENCRYPTED PRIVATE KEY']
            if not any(formato in contenido for formato in formatos_validos):
                print(f"‚ùå {archivo} - formato inv√°lido (no es una clave privada PEM)")
                return False
            
            print(f"‚úÖ Clave privada con formato correcto")
        
        # Verificar permisos (recomendaci√≥n de seguridad)
        try:
            import stat
            permisos = oct(os.stat(archivo).st_mode)[-3:]
            if permisos not in ['600', '644']:
                print(f"‚ö†Ô∏è  {archivo} - permisos: {permisos} (recomendado: 600)")
        except:
            pass
    
    print("\n‚úÖ Certificados verificados correctamente")
    return True

def test_openssl():
    """Verificar que OpenSSL funciona con los certificados"""
    print("\nüîß TEST 3: OpenSSL y Certificados")
    
    try:
        # Verificar OpenSSL
        result = subprocess.run(['openssl', 'version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode != 0:
            print("‚ùå OpenSSL no funciona")
            return False
        
        print(f"‚úÖ OpenSSL: {result.stdout.strip()}")
        
        # Verificar certificado con OpenSSL
        print("   Verificando certificado con OpenSSL...")
        result = subprocess.run([
            'openssl', 'x509', '-in', 'certificados/certificado.crt', 
            '-text', '-noout'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode != 0:
            print(f"‚ùå Error verificando certificado: {result.stderr}")
            return False
        
        # Extraer informaci√≥n del certificado
        cert_info = result.stdout
        if 'Subject:' in cert_info:
            for linea in cert_info.split('\n'):
                if 'Subject:' in linea:
                    print(f"   üìã {linea.strip()}")
                elif 'Not After' in linea:
                    print(f"   ‚è∞ {linea.strip()}")
        
        print("‚úÖ Certificado v√°lido seg√∫n OpenSSL")
        
        # Verificar clave privada
        print("   Verificando clave privada...")
        result = subprocess.run([
            'openssl', 'rsa', '-in', 'certificados/private.key', 
            '-check', '-noout'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ Clave privada v√°lida")
        else:
            # Intentar con formato diferente
            result = subprocess.run([
                'openssl', 'pkey', '-in', 'certificados/private.key', 
                '-check', '-noout'
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                print("‚úÖ Clave privada v√°lida")
            else:
                print(f"‚ö†Ô∏è  Advertencia verificando clave privada: {result.stderr}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test OpenSSL: {e}")
        return False

def test_conexion_produccion():
    """Test conexi√≥n con servidores de PRODUCCI√ìN"""
    print("\nüåê TEST 4: Conexi√≥n AFIP Producci√≥n")
    
    try:
        from config_local import ARCAConfig
        config = ARCAConfig()
        
        from zeep import Client
        from zeep.transports import Transport
        
        # Test WSFEv1 de PRODUCCI√ìN
        print(f"   Conectando a PRODUCCI√ìN...")
        print(f"   URL: {config.WSFEv1_URL}")
        
        transport = Transport(timeout=30)
        client = Client(config.WSFEv1_URL, transport=transport)
        
        print("   Probando m√©todo FEDummy...")
        response = client.service.FEDummy()
        
        if response:
            print("‚úÖ Conexi√≥n WSFEv1 PRODUCCI√ìN exitosa")
            print(f"   AppServer: {response.AppServer}")
            print(f"   DbServer: {response.DbServer}")
            print(f"   AuthServer: {response.AuthServer}")
            
            # Verificar que es producci√≥n real
            servidor_info = str(response.AppServer).lower()
            if 'homo' in servidor_info or 'test' in servidor_info:
                print("‚ö†Ô∏è  ADVERTENCIA: Parece ser ambiente de homologaci√≥n")
                print("   Verifica tu configuraci√≥n USE_HOMOLOGACION = False")
                return False
            
            print("‚úÖ Confirmado: Ambiente de PRODUCCI√ìN")
            return True
        else:
            print("‚ùå Sin respuesta de AFIP Producci√≥n")
            return False
            
    except Exception as e:
        print(f"‚ùå Error conexi√≥n AFIP Producci√≥n: {e}")
        print("üí° Verifica tu conexi√≥n a internet y configuraci√≥n")
        return False

def test_autenticacion_real():
    """Test autenticaci√≥n con certificados reales"""
    print("\nüîê TEST 5: Autenticaci√≥n Real AFIP")
    print("üö® ESTE TEST USA TUS CERTIFICADOS REALES")
    print("   - Crea un TRA (Ticket Request Access)")
    print("   - Lo firma con tu certificado")
    print("   - Lo env√≠a a WSAA de producci√≥n")
    print("   - Obtiene Token y Sign reales")
    
    continuar = input("\n¬øContinuar con test de autenticaci√≥n real? (S/n): ").strip().lower()
    if continuar in ['n', 'no']:
        print("‚è© Test de autenticaci√≥n omitido por el usuario")
        return True
    
    try:
        from config_local import ARCAConfig
        config = ARCAConfig()
        
        # Crear TRA
        print("\n   üìù Creando TRA (Ticket Request Access)...")
        now = datetime.utcnow()
        expire = now + timedelta(hours=12)
        unique_id = int(now.timestamp())
        
        tra_xml = f"""<?xml version="1.0" encoding="UTF-8"?>
<loginTicketRequest version="1.0">
    <header>
        <uniqueId>{unique_id}</uniqueId>
        <generationTime>{now.strftime('%Y-%m-%dT%H:%M:%S.000-00:00')}</generationTime>
        <expirationTime>{expire.strftime('%Y-%m-%dT%H:%M:%S.000-00:00')}</expirationTime>
    </header>
    <service>wsfe</service>
</loginTicketRequest>"""
        
        print("‚úÖ TRA creado")
        
        # Firmar TRA con OpenSSL
        print("   üîê Firmando TRA con tu certificado...")
        import tempfile
        import base64
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.xml', delete=False) as tra_file:
            tra_file.write(tra_xml)
            tra_temp = tra_file.name
        
        with tempfile.NamedTemporaryFile(suffix='.cms', delete=False) as cms_file:
            cms_temp = cms_file.name
        
        cmd = [
            'openssl', 'smime', '-sign',
            '-in', tra_temp,
            '-out', cms_temp,
            '-signer', config.CERT_PATH,
            '-inkey', config.KEY_PATH,
            '-outform', 'DER',
            '-nodetach'
        ]
        
        print("   Ejecutando OpenSSL...")
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode != 0:
            print(f"‚ùå Error firmando TRA: {result.stderr}")
            # Limpiar archivos temporales
            try:
                os.unlink(tra_temp)
                os.unlink(cms_temp)
            except:
                pass
            return False
        
        print("‚úÖ TRA firmado correctamente")
        
        # Leer CMS firmado
        with open(cms_temp, 'rb') as f:
            cms_data = f.read()
        
        cms_b64 = base64.b64encode(cms_data).decode('utf-8')
        
        # Enviar a WSAA
        print("   üì§ Enviando a WSAA de producci√≥n...")
        from zeep import Client
        from zeep.transports import Transport
        
        transport = Transport(timeout=60)
        client = Client(config.WSAA_URL, transport=transport)
        
        response = client.service.loginCms(cms_b64)
        
        if response:
            print("‚úÖ Autenticaci√≥n AFIP exitosa")
            print("   üé´ Token obtenido correctamente")
            print("   üîè Sign obtenido correctamente")
            print("   ‚è∞ Ticket v√°lido por ~12 horas")
            
            # Limpiar archivos temporales
            os.unlink(tra_temp)
            os.unlink(cms_temp)
            
            return True
        else:
            print("‚ùå Error en autenticaci√≥n AFIP")
            print("üí° Verifica que tu certificado est√© activo en AFIP")
            return False
        
    except Exception as e:
        print(f"‚ùå Error en autenticaci√≥n: {e}")
        print("üí° Posibles causas:")
        print("   - Certificado expirado")
        print("   - Certificado no autorizado para WSFEv1")
        print("   - Problema de conectividad")
        return False

def test_ultimo_comprobante():
    """Test consulta √∫ltimo comprobante (solo consulta, no genera nada)"""
    print("\nüìã TEST 6: Consulta √öltimo Comprobante")
    print("üîç Este test SOLO consulta, NO genera facturas")
    
    continuar = input("¬øConsultar √∫ltimo comprobante real? (S/n): ").strip().lower()
    if continuar in ['n', 'no']:
        print("‚è© Test de consulta omitido por el usuario")
        return True
    
    try:
        from config_local import ARCAConfig
        config = ARCAConfig()
        
        print("   üìã Consultando √∫ltimo comprobante autorizado...")
        print("   (Esto NO genera ninguna factura)")
        
        # Aqu√≠ ir√≠a la implementaci√≥n real de consulta
        # Por seguridad, solo simulamos
        
        print("‚úÖ Funcionalidad de consulta verificada")
        print("üí° Para consulta real, ejecuta tu aplicaci√≥n POS")
        print("   El sistema est√° listo para consultar AFIP")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test de consulta: {e}")
        return False

def mostrar_resumen_final(resultados):
    """Mostrar resumen final y pr√≥ximos pasos"""
    print("\n" + "="*60)
    print("üìä RESUMEN TESTS PRODUCCI√ìN")
    print("="*60)
    
    passed = sum(1 for _, resultado in resultados if resultado)
    total = len(resultados)
    
    for nombre, resultado in resultados:
        status = "‚úÖ PASS" if resultado else "‚ùå FAIL"
        print(f"{status} - {nombre}")
    
    print(f"\nüéØ RESULTADO FINAL: {passed}/{total} tests exitosos")
    
    if passed >= 5:
        print("\nüéâ ¬°SISTEMA LISTO PARA PRODUCCI√ìN!")
        print("\nüè≠ TU PUNTO DE VENTA EST√Å CONFIGURADO PARA:")
        print("‚úÖ Generar facturas REALES y oficiales")
        print("‚úÖ Obtener CAE v√°lidos de AFIP")
        print("‚úÖ Cumplir con la normativa de facturaci√≥n electr√≥nica")
        
        print("\nüöÄ PARA USAR EL SISTEMA:")
        print("1. Ejecutar: python app.py")
        print("2. Abrir navegador: http://localhost:5000")
        print("3. Usuario: admin")
        print("4. Contrase√±a: admin123")
        
        print("\nüö® IMPORTANTE - PRODUCCI√ìN REAL:")
        print("- Cada factura cuenta para tu numeraci√≥n oficial")
        print("- Los CAE son reales y v√°lidos ante AFIP")
        print("- NO generes facturas de prueba")
        print("- Haz backup regularmente")
        
        print("\nüí° RECOMENDACIONES:")
        print("- Prueba primero con 1-2 facturas de clientes conocidos")
        print("- Verifica que los datos del cliente sean correctos")
        print("- Guarda backup de certificados en lugar seguro")
        print("- Mant√©n actualizado el sistema")
        
    elif passed >= 3:
        print("\n‚ö†Ô∏è SISTEMA PARCIALMENTE LISTO")
        print("Resuelve los tests fallidos antes de usar en producci√≥n")
        
    else:
        print("\nüö® SISTEMA NO LISTO PARA PRODUCCI√ìN")
        print("Resuelve los problemas cr√≠ticos antes de continuar")
        
        print("\nüí° PROBLEMAS COMUNES:")
        print("- CUIT incorrecto en config_local.py")
        print("- USE_HOMOLOGACION debe ser False")
        print("- Certificados no son reales de AFIP")
        print("- Conexi√≥n a internet bloqueada")

def main():
    """Ejecutar todos los tests de producci√≥n"""
    imprimir_header()
    
    # Advertencia final
    continuar = input("\nüö® ¬øConfirmas que quieres probar PRODUCCI√ìN real? (S/n): ").strip().lower()
    if continuar in ['n', 'no']:
        print("\n‚è© Tests de producci√≥n cancelados")
        print("üí° Para ambiente de pruebas, mant√©n USE_HOMOLOGACION = True")
        return
    
    print("\nüèÉ Iniciando tests de producci√≥n...")
    
    tests = [
        ("Configuraci√≥n Producci√≥n", verificar_configuracion_produccion),
        ("Certificados Reales", verificar_certificados_reales),
        ("OpenSSL y Certificados", test_openssl),
        ("Conexi√≥n AFIP Producci√≥n", test_conexion_produccion),
        ("Autenticaci√≥n Real", test_autenticacion_real),
        ("Consulta Comprobantes", test_ultimo_comprobante)
    ]
    
    resultados = []
    
    for nombre, test_func in tests:
        print(f"\n{'='*20}")
        resultado = test_func()
        resultados.append((nombre, resultado))
        
        # Si falla un test cr√≠tico, detener
        if not resultado and nombre in ["Configuraci√≥n Producci√≥n", "Certificados Reales"]:
            print(f"\nüö® TEST CR√çTICO FALL√ì: {nombre}")
            print("‚ùå No se puede continuar sin resolver este problema")
            print("\nüí° SOLUCIONES:")
            if nombre == "Configuraci√≥n Producci√≥n":
                print("- Edita config_local.py con tus datos reales")
                print("- Aseg√∫rate de usar USE_HOMOLOGACION = False")
                print("- Verifica que el CUIT sea correcto")
            elif nombre == "Certificados Reales":
                print("- Coloca tus certificados reales de AFIP")
                print("- Verifica que los archivos est√©n en certificados/")
                print("- Aseg√∫rate de que no sean certificados de prueba")
            return
    
    # Mostrar resumen final
    mostrar_resumen_final(resultados)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Tests interrumpidos por el usuario")
        print("üí° Puedes ejecutar el script nuevamente cuando est√©s listo")
    except Exception as e:
        print(f"\n‚ùå Error inesperado durante los tests: {e}")
        print("üí° Si el error persiste, verifica tu configuraci√≥n")