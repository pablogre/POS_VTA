#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Diagn√≥stico de certificados AFIP
Ejecutar: python diagnosticar_certificados.py
"""

import subprocess
import os

def verificar_certificado():
    """Verificar certificado"""
    print("üîê VERIFICANDO CERTIFICADO")
    print("=" * 30)
    
    cert_path = 'certificados/certificado.crt'
    
    if not os.path.exists(cert_path):
        print(f"‚ùå No existe: {cert_path}")
        return False
    
    try:
        # Informaci√≥n del certificado
        print("üìã Informaci√≥n del certificado:")
        result = subprocess.run([
            './openssl.exe', 'x509', '-in', cert_path, 
            '-subject', '-issuer', '-dates', '-noout'
        ], capture_output=True, text=True, timeout=15)
        
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            for line in lines:
                if 'subject=' in line:
                    print(f"   üë§ {line}")
                elif 'issuer=' in line:
                    print(f"   üè¢ {line}")
                elif 'notBefore=' in line:
                    print(f"   üìÖ V√°lido desde: {line.split('=')[1]}")
                elif 'notAfter=' in line:
                    print(f"   ‚è∞ V√°lido hasta: {line.split('=')[1]}")
        
        # Obtener m√≥dulo del certificado
        print("\nüî¢ Obteniendo huella del certificado...")
        result = subprocess.run([
            './openssl.exe', 'x509', '-in', cert_path, 
            '-modulus', '-noout'
        ], capture_output=True, text=True, timeout=15)
        
        if result.returncode == 0:
            cert_modulus = result.stdout.strip()
            print(f"   üìä M√≥dulo cert: {cert_modulus[:50]}...")
            return cert_modulus
        else:
            print(f"   ‚ùå Error obteniendo m√≥dulo: {result.stderr}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error verificando certificado: {e}")
        return None

def verificar_clave_privada():
    """Verificar clave privada"""
    print("\nüîë VERIFICANDO CLAVE PRIVADA")
    print("=" * 30)
    
    key_path = 'certificados/private.key'
    
    if not os.path.exists(key_path):
        print(f"‚ùå No existe: {key_path}")
        return False
    
    try:
        # Verificar formato de la clave
        print("üîç Verificando formato de clave privada...")
        
        # Intentar con RSA
        result = subprocess.run([
            './openssl.exe', 'rsa', '-in', key_path, 
            '-check', '-noout'
        ], capture_output=True, text=True, timeout=15)
        
        if result.returncode == 0:
            print("   ‚úÖ Clave RSA v√°lida")
            key_type = "rsa"
        else:
            # Intentar con formato gen√©rico
            result = subprocess.run([
                './openssl.exe', 'pkey', '-in', key_path, 
                '-check', '-noout'
            ], capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0:
                print("   ‚úÖ Clave privada v√°lida (formato gen√©rico)")
                key_type = "pkey"
            else:
                print(f"   ‚ùå Clave inv√°lida: {result.stderr}")
                return None
        
        # Obtener m√≥dulo de la clave privada
        print("üî¢ Obteniendo huella de la clave privada...")
        
        if key_type == "rsa":
            result = subprocess.run([
                './openssl.exe', 'rsa', '-in', key_path, 
                '-modulus', '-noout'
            ], capture_output=True, text=True, timeout=15)
        else:
            # Para formato gen√©rico, extraer clave p√∫blica
            result = subprocess.run([
                './openssl.exe', 'pkey', '-in', key_path, 
                '-pubout'
            ], capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0:
                # Obtener m√≥dulo de la clave p√∫blica extra√≠da
                pubkey_data = result.stdout
                
                # Guardar temporalmente
                with open('temp_pubkey.pem', 'w') as f:
                    f.write(pubkey_data)
                
                result = subprocess.run([
                    './openssl.exe', 'pkey', '-pubin', '-in', 'temp_pubkey.pem',
                    '-text', '-noout'
                ], capture_output=True, text=True, timeout=15)
                
                # Limpiar archivo temporal
                if os.path.exists('temp_pubkey.pem'):
                    os.remove('temp_pubkey.pem')
        
        if result.returncode == 0:
            if key_type == "rsa":
                key_modulus = result.stdout.strip()
                print(f"   üìä M√≥dulo clave: {key_modulus[:50]}...")
                return key_modulus
            else:
                print("   ‚úÖ Clave privada procesada (formato complejo)")
                return "FORMATO_COMPLEJO"
        else:
            print(f"   ‚ùå Error obteniendo m√≥dulo: {result.stderr}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error verificando clave privada: {e}")
        return None

def verificar_compatibilidad(cert_mod, key_mod):
    """Verificar que certificado y clave coincidan"""
    print("\nüîó VERIFICANDO COMPATIBILIDAD")
    print("=" * 30)
    
    if cert_mod is None or key_mod is None:
        print("‚ùå No se pueden comparar (faltan datos)")
        return False
    
    if key_mod == "FORMATO_COMPLEJO":
        print("‚ö†Ô∏è  No se puede verificar compatibilidad autom√°ticamente")
        print("   Usando test de firma...")
        return test_firma()
    
    if cert_mod == key_mod:
        print("‚úÖ ¬°Certificado y clave privada SON COMPATIBLES!")
        return True
    else:
        print("‚ùå Certificado y clave privada NO son compatibles")
        print("üí° Los archivos no pertenecen al mismo par de claves")
        return False

def test_firma():
    """Test de firma para verificar compatibilidad"""
    print("\n‚úçÔ∏è TEST DE FIRMA")
    print("=" * 20)
    
    try:
        # Crear archivo de prueba
        with open('test_sign.txt', 'w') as f:
            f.write("Test de compatibilidad AFIP")
        
        # Intentar firmar
        result = subprocess.run([
            './openssl.exe', 'smime', '-sign',
            '-in', 'test_sign.txt',
            '-out', 'test_sign.cms',
            '-signer', 'certificados/certificado.crt',
            '-inkey', 'certificados/private.key',
            '-outform', 'DER',
            '-nodetach'
        ], capture_output=True, text=True, timeout=30)
        
        # Limpiar archivos
        if os.path.exists('test_sign.txt'):
            os.remove('test_sign.txt')
        if os.path.exists('test_sign.cms'):
            os.remove('test_sign.cms')
        
        if result.returncode == 0:
            print("‚úÖ Test de firma exitoso - Certificados compatibles")
            return True
        else:
            print(f"‚ùå Test de firma fall√≥: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en test de firma: {e}")
        return False

def mostrar_soluciones():
    """Mostrar soluciones para certificados incompatibles"""
    print("\n" + "="*50)
    print("üí° SOLUCIONES PARA CERTIFICADOS INCOMPATIBLES")
    print("="*50)
    
    print("\nüîê PROBLEMA: Certificado y clave privada no coinciden")
    print("\nüìã POSIBLES CAUSAS:")
    print("1. Se mezclaron archivos de diferentes certificados")
    print("2. Se descarg√≥ solo el certificado sin la clave correspondiente")
    print("3. Los archivos est√°n corruptos")
    print("4. Se us√≥ una clave antigua con un certificado nuevo")
    
    print("\nüí° SOLUCIONES:")
    print("\nüîÑ OPCI√ìN 1: Re-descargar desde AFIP")
    print("1. Ve a https://www.afip.gob.ar")
    print("2. Ingresa con tu CUIT y Clave Fiscal")
    print("3. Ve a 'Administrador de Relaciones de Clave Fiscal'")
    print("4. Busca tu certificado actual")
    print("5. Descarga AMBOS archivos nuevamente:")
    print("   - certificado.crt")
    print("   - private.key (o clave privada)")
    print("6. Aseg√∫rate de que sean del MISMO certificado")
    
    print("\nüÜï OPCI√ìN 2: Generar nuevo certificado")
    print("1. Genera un nuevo par certificado/clave en AFIP")
    print("2. As√≥calo a WSFEv1 (Facturaci√≥n Electr√≥nica)")
    print("3. Descarga ambos archivos")
    print("4. Reemplaza los archivos en certificados/")
    
    print("\nüîç OPCI√ìN 3: Verificar archivos")
    print("1. Verifica que certificado.crt tenga:")
    print("   -----BEGIN CERTIFICATE-----")
    print("   -----END CERTIFICATE-----")
    print("2. Verifica que private.key tenga:")
    print("   -----BEGIN PRIVATE KEY----- o")
    print("   -----BEGIN RSA PRIVATE KEY-----")
    
    print("\n‚ö†Ô∏è  IMPORTANTE:")
    print("- Ambos archivos deben ser del MISMO certificado")
    print("- La clave privada NO debe tener contrase√±a")
    print("- Descarga desde la misma sesi√≥n de AFIP")

def main():
    """Ejecutar diagn√≥stico completo"""
    print("üîç DIAGN√ìSTICO DE CERTIFICADOS AFIP")
    print("=" * 40)
    
    if not os.path.exists('./openssl.exe'):
        print("‚ùå OpenSSL no encontrado en el proyecto")
        print("üí° Ejecuta primero los pasos anteriores")
        return
    
    # Verificar certificado
    cert_modulus = verificar_certificado()
    
    # Verificar clave privada
    key_modulus = verificar_clave_privada()
    
    # Verificar compatibilidad
    compatibles = verificar_compatibilidad(cert_modulus, key_modulus)
    
    # Resumen final
    print("\n" + "="*40)
    print("üìä RESUMEN DEL DIAGN√ìSTICO")
    print("="*40)
    
    if compatibles:
        print("üéâ ¬°CERTIFICADOS CORRECTOS!")
        print("El problema no est√° en los certificados.")
        print("Puede ser un problema de conectividad con AFIP.")
    else:
        print("üö® PROBLEMA ENCONTRADO:")
        print("Los certificados no son compatibles")
        mostrar_soluciones()

if __name__ == "__main__":
    main()